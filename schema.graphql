type Query {
  allMdx: [Mdx]!
  mdx(slug: String, compilerOptions: CompileOptionsInput): Mdx
  meta: Meta
  allResource: [ResourceNode]!
  allFile: [FileNode]!
}

type Mdx {
  jsx: String!
  raw: String!
  slug: String

  compilerOptions: CompileOptions

  """
  Virtual file.
  """
  vfile: VFile!

  fileNode: FileNode!
}

type Meta {
  baseUrl: String!
}

interface Node {
  type: String!
}

type ResourceNode {
  url: Url!

  request: Request!

  type: String!

  value: String!

  resourceType: ResourceType!

  response: Response!
}

type Request {
  integrity: String
  isHistoryNavigation: Boolean
  isReloadNavigation: Boolean
  keepalive: Boolean
  method: String!
  mode: String
  redirect: String!
  referrer: String
  referrerPolicy: String
  url: String!
}

type Url {
  hash: String!
  host: String!
  hostname: String!
  origin: String!
  password: String!
  pathname: String!
  port: String!
  protocol: String!
  search: String!
  username: String!
}

type Response {
  ok: Boolean!

  status: Int!

  statusText: String!

  type: ResponseType!

  url: String!

  redirected: Boolean!
}

enum RequestRedirect {
  ERROR
  FOLLOW
  MANUAL
}

enum RequestMode {
  SAME_ORIGIN
  CORS
  NAVIGATE
  NO_CORS
}

enum FileType {
  TEXT
  BINARY
}

enum ResourceType {
  TEXT
  BINARY
}

enum ResponseType {
  basic
  cors
  default
  error
  opaque
  opaqueredirect
}

type VFile {
  """
  List of filepaths the file moved between.
  The first is the original path and the last is the current path.
  """
  history: [String]!

  """
  Base of `path` (default: `process.cwd()` or `'/'` in browsers).
  """
  cwd: String!

  """
``Whether a file was saved to disk.
``This is used by vfile reporters.
  """
  stored: Boolean!
}

type FileNode {
  value: String!
  type: String!
  fileType: FileType!

  """
  The root of the path such as '/' or 'c:\'
  """
  root: String!

  """
  The full directory path such as '/home/user/dir' or 'c:\path\dir'
  """
  dir: String!


  """
  The file name including extension (if any) such as 'index.html'
  """
  base: String!


  """
  The file extension (if any) such as '.html'
  """
  ext: String!

  """
  The file name without extension (if any) such as 'index'
  """
  name: String!

  """
  Absolute path
  """
  absolutePath: String!

  """
  Blocksize for filesystem I/O.
  Linux/Mac OS only.
  """
  blksize: Int

  """
  Number of blocks allocated to the file, in 512-byte units.
  Linux/Mac OS only.
  """
  blocks: Int

  """
  ID of the device containing the file.
  Linux/Mac OS only.
  """
  dev: Int

  """
  Group ID of the owner of this file.
  Linux/Mac OS only.
  """
  gid: Int

  """
  Inode number.
  Linux/Mac OS only.
  """
  ino: Int

  """
  Number of hard links pointing to this file.
  Linux/Mac OS only.
  """
  nlink: Int

  """
  Device ID of this file.
  Linux/Mac OS only.
  """
  rdev: Int

  """
  The size of the file, in bytes.
  """
  size: Int!

  # TODO:(miyauuci) implement Date Scalar
  # mtime: Date

  """
  User ID of the owner of this file.
  Linux/Mac OS only.
  """
  uid: Int
}

type CompileOptions {
  """
  Whether to keep JSX.
  """
  jsx: Boolean

  """
  Whether to compile to a whole program or a function body.
  """
  outputFormat: OutputFormat

  """
  Place to import automatic JSX runtimes from (used in automatic runtime).
  """
  jsxImportSource: String
}

input CompileOptionsInput {
  """
  Whether to keep JSX.
  """
  jsx: Boolean

  """
  Whether to compile to a whole program or a function body.
  """
  outputFormat: OutputFormat

  """
  Place to import automatic JSX runtimes from (used in automatic runtime).
  """
  jsxImportSource: String
}

enum OutputFormat {
  PROGRAM
  FUNCTION_BODY
}
